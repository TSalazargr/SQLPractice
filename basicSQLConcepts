<html>
  <title>Basic SQL Concepts</title>
</html>
<body>
  <header>
    <h1 id="top">Basic SQL Concepts</h1>
    <nav>
      <ul>
        <li>
          <a href="#select">SELECT</a>: Extract field data from a table.
        </li>
        <li>
          <a href="#orderBy">ORDER BY</a>: Sort the extracted data in the results table.
        </li>
        <li>
          <a href="#limit">LIMIT</a>: extracts x number of records.
        </li>
        <li>
          <a href="#offset">OFFSET</a>: is used with LIMIT to skip a number of records.
        </li>
        <li>
          <a href="#as">AS</a>: give columns a temporary name (or alias).
        </li>
        <li>
          <a href="#where">WHERE</a>: extract records that meet a condition. Filtering happens first.
        </li>
        <li>
          <a href="#like">LIKE</a>: used with the WHERE command to search for patterns in string values.
        </li>
        <li>
          <a href="#wildcards">Wildcards</a>: Replace other symbols with one character (_) or any number of character (%)
        </li>
        <li>
          <a href="#lowerUpper">LOWER() and UPPER()</a>: Convert strings to lower or uppercase.
        </li>
        <li>
          <a href="#dataAggregation">Data Aggregation</a>: Operates on multiple values to produce a a single numerical value.
        </li>
        <ul>
          <li>
            <a href="#minMax">MIN() and MAX()</a>: Extracts minimum or maximum number in a field.
          </li>
          <li>
            <a href="#count">COUNT()</a>: Counts the number of records.
          </li>
          <li>
            <a href="#sum">SUM()</a>: Produces the total sum of the values in a numerical field.
          </li>
          <li>
            <a href="#avg">AVG()</a>: Calculates the average value.
          </li>
        </ul>
        <li>
          <a href="#groupBy">GROUP BY</a>: Organizes data with the same value in one of the fields into categories.
        </li>
        <li>
          <a href="#having">HAVING</a>: Specifies a condition for filtering values from a group.
        </li>
        <li>
          <a href="#distinct">DISTINCT</a>: Eliminates duplicate values.
        </li>
        <li>
          <a href="#isNullNotNull">IS NULL and NOT NULL</a>: Display records where the specified field is/is not null.
        </li>
      </ul>
    </nav>
  </header>
  <main>
    <h2 id="select">Select</h2>
    <p>The SELECT command is used to extract field data from a table․</p>
    <h3>Example</h3>
    <p>SELECT year </br> FROM movies </p>
    <h2 id="orderBy">Order By</h2>
    <p>Sorting consists of putting data in a meaningful order.</p>
    <p>The ORDER BY command is used to sort the extracted data in the results table. Data is sorted by fields.</p>
    <p>Your extracted data will be sorted in ascending order by default. If you need the data sorted in descending order (from largest to smallest) you need to add the DESC keyword.</p>
    <p>By default, data is sorted in ascending order. You can use the explicit ASC keyword to clarify and make your queries more readable, particularly when writing complex queries.</p>
    <h3>Example</h3>
    <p>SELECT * <br> FROM movies <br> ORDER BY year </p>
    <p>SELECT * <br> FROM customers <br> ORDER BY age DESC </p>
    <p>You can also sort data by a field that contains text. The default ascending order for text is alphabetical order.</p>
    <h3>Example</h3>
    <p>SELECT * <br> FROM customers <br> ORDER BY name DESC </p>
    <h2 id="limit">Limit</h2>
    <p>Breaking large sets of data into smaller parts speeds up loading times and helps show people only what they need.</p>
    <p>The LIMIT keyword extracts a limited number of records.</p>
    <p>LIMIT can be used combined with ORDER BY. LIMIT is applied as the last operation. The results will be sorted first, then limited.</p>
    <h3>Example</h3>
    <p>--Extracts the first 10 records <br> SELECT * <br> FROM employees <br> LIMIT 10 </p>
    <p>--Extracts the first 10 lowestrecords <br> SELECT * <br> FROM employees <br> ORDER BY salary ASC <br> LIMIT 10 </p>
    <h2 id="offset">Offset</h2>
    <p>The OFFSET parameter is used with LIMIT to skip a number of records.</p>
    <h3>Example</h3>
    <p>--Skips 2 first records <br> SELECT title <br> FROM movies <br> LIMIT 3 OFFSET 2 </p>
    <h2 id="as">As</h2>
    <p>You can give columns a temporary name (or alias) using the AS keyword</p>
    <h3>Example</h3>
    <p>--Create a table with the name and price x delivery; name the new field 'multiplication' SELECT name, price*delivery AS multiplication <br> FROM sales </p>
    <h2 id="where">Where</h2>
    <p>WHERE is used to extract records that meet a condition. <br> When running queries that involve different operations, filtering happens first. </p>
    <h3>Example</h3>
    <p>SELECT * <br> FROM studio <br> WHERE name = 'Walt Disney' </p>
    <p>Strings (text values) have to be surrounded by single quotes (').</p>
    <h2>Comparison operations</h2>
    <ul>
      <li>Greater than '>'</li>
      <li>Less than '<' </li>
      <li>Equal to '='</li>
      <li>Greater than or equal to '>='</li>
      <li>Less than or equal to '<=' </li>
      <li>Not equal '<>' </li>
      <ul>
        <li>Can be used with both numbers and string values.</li>
      </ul>
    </ul>
    <h3>Example</h3>
    <p>SELECT * <br> FROM studio <br> WHERE year_funded > 2000 </p>
    <p>SELECT * <br> FROM studio <br> WHERE year_funded = 2000 </p>
    <p>/*The second field shows if the records meet <br> or don’t meet the condition <br> true (t) or false (f)*/ <br> SELECT year, year > 2000 AS result <br> FROM movies; </p>
    <p>/*Filtering query that extracts <br> only the records that make <br> the condition true*/ <br> SELECT title <br> FROM movies <br> WHERE year > 2000; </p>
    <h2 id="like">Like</h2>
    <p>The LIKE keyword is used with the WHERE command to search for patterns in string values.</p>
    <h3>Example</h3>
    <p>SELECT * <br> FROM comics <br> WHERE title LIKE 'The Avengers%' </p>
    <p>A comparison operation always results in one of these two outcomes: Yes (True) or No (False)</p>
    <h2>Multiple Queries</h2>
    <pYou can include multiple queries in your SQL code. You just need to separate them with a semicolon(;) </p>
      <h3>Example</h3>
      <p>/*Generates two tables: one with fields name and code extracted from products <br> and one with all the names of the records where the field code has the structure A_B_ <br> SELECT name, code <br> FROM products; <br>
        <br> SELECT name <br> FROM products <br> WHERE code LIKE 'A_B_';
      </p>
      <h2 id="wildcards">Wildcards</h2>
      <h3>%</h3>
      <p>The % symbol can replace any number of characters (one, multiple or none) in a string to create patterns. The % special symbol is known as a wildcard and is used to create patterns.</p>
      <p>Patterns with the LIKE operator are case-sensitive in most database systems. This means that the pattern will treat uppercase and lowercase characters as different. </P>
      <p>When numbers are part of a string they can also be matched with patterns.</p>
      <h4>Example</h4>
      <p>You can use patterns to extract email addresses that share the same domain.</p>
      <p>%gmail.com' will extract any email that ends with 'gmail.com'</p>
      <h3>_</h3>
      <p>The underscore symbol _ is another wildcard and represents 1 single character only.</p>
      <h2>Lower and Uppercase</h2>
      <p>Patterns are case-sensitive. <br>
      <h2 id="lowerUpper">Lower() and Upper()</h2>
      <p>LOWER() and UPPER() commands are used to convert strings to lower or uppercase.</p>
      <p>Use LOWER (or UPPER) with LIKE in the WHERE command line for case-insensitive pattern matching</p>
      <h3>Example</h3>
      <p>SELECT LOWER(title) <br> FROM movies; <br> SELECT UPPER(title) <br> FROM movies; </p>
      <p>/*Transform everything to lowercase for case-insensitive pattern matching <br> The lowercase transformation only affects the WHERE, the table itself would preserve the original format*/ SELECT title <br> FROM books <br> WHERE LOWER(title) LIKE '%cooking%' </p>
      <h2 id="dataAggregation">Data aggregation</h2>
      <p>Aggregation operates on multiple values to produce a a single numerical value.</p>
      <h3 id="minMax">MIN() and MAX()</h3>
      <p>MIN() is an example of an aggregation operation. MAX() is another example of an aggregation operation.</p>
      <p>They extract the minimum or maximum number in a field.</p>
      <h4>Example</h4>
      <p>/* <br> Extracts the highest value in the year field <br> */ <br> SELECT MAX(year) <br> FROM movies; </p>
      <p>/* <br> Extracts the lowest value in the year field <br> */ <br> SELECT MIN(year) <br> FROM movies; </p>
      <p>/* <br> Extracts both the highest and lowest value in year field <br> */ <br> SELECT MIN(year), MAX(year) FROM movies; </p>
      <p>SELECT MIN(year) <br> FROM movies <br> WHERE year > 2000 </p>
      <h3 id="count">COUNT()</h3>
      <p>COUNT() is another aggregation operation. It counts the number of records.</p>
      <h4>Example</h4>
      <p>--Counts the number of records in a field <br> SELECT COUNT(year) <br> FROM movies; </p>
      <h3 id="sum">SUM()</h3>
      <p>SUM() is another aggregation operation. It produces the total sum of the values in a numerical field.</p>
      <h4>Example</h4>
      <p>--Sums the prices of all products <br> SELECT SUM(price) <br> FROM products </p>
      <p>SELECT SUM(price+delivery) AS revenue <br> FROM sales; </p>
      <h3 id="avg">AVG()</h3>
      <p>AVG() is another example of an aggregation operation. It calculates the average value.</p>
      <h4>Example</h4>
      <p>--Gets the average of all prices <br> SELECT AVG(price) <br> FROM products </p>
      <h2 id="groupBy">Group By</h2>
      <p>Organizes data with the same value in one of the fields into categories.</p>
      <p>GROUP BY allows you to organize similar data into categories. It's combined with aggregations to compute key metrics for a group of records.</p>
      <p>At least one field is needed to group the data. Remember you can use the AS keyword to give a name to the fields in the results table</p>
      <p>GROUP BY is most often combined with aggregation.</p>
      <p>You can combine GROUP BY with WHERE filters. Data is filtered first, then grouped.</p>
      <h3>Example</h3>
      <p>/*Groups records by genre and <br> calculates the average budget for each group*/ <br> SELECT genre, AVG(budget) <br> FROM movies <br> GROUP BY genre; </p>
      <p>--Creates a table with the average budget of each genre <br> SELECT genre, AVG(budget) AS avg_budget <br> FROM movies <br> GROUP BY genre; </p>
      <p>/*Creates a table with the average budget <br> by genre for genres where the average budget <br> is over 50*/ <br> SELECT genre, AVG(budget) <br> FROM movies <br> WHERE budget > 50 <br> GROUP BY genre; </p>
      <h2 id="having">Having</h2>
      <p>HAVING allows you to filter data that has been grouped.</p>
      <p>When a query contains both GROUP BY and HAVING, data is grouped first, then filtered.</p>
      <p>The main difference between them is that the WHERE clause is used to specify a condition for filtering records before any groupings are made, while the HAVING clause is used to specify a condition for filtering values from a group.</p>
      <h3>Example</h3>
      <p>/*Creates a table with the average budget <br> by genre where the average budget <br> is over 50, grouping data before filtering*/ <br> SELECT genre, AVG(budget) <br> FROM movies <br> GROUP BY genre <br> HAVING AVG(budget) > 50; </p>
      <p>/*Identifies duplicates in the data by seeing if <br> any name appears more than once*/ <br> SELECT name COUNT(id) <br> FROM employees <br> GROUP BY name <br> HAVING COUNT(name) > 1; </p>
      <br>
      <h2 id="distinct">Distinct</h2>
      <p>Use DISTINCT to eliminate duplicate values.</p>
      <h3>Example</h3>
      <p>/* DISTINCT is used before <br> the field we want to extract. <br> In this case it will extract all <br> names that are unique.*/ <br> SELECT DISTINCT nameundefined<br> FROM employees;undefined</p>undefined<h2 id="isNullNotNull">Null and Is Not Null</h2>undefined<p>NULL is used to indicate that a data value is missing and does not exist in the database. NULL values are not shown in result tables.</p>undefined<p>You can check if your data contains missing values. Use IS NULL in combination with WHERE to find missing values.</p>undefined<p>Similarly, you can extract non-null values using IS NOT NULL. This will filter null values out.</p>undefined<h3>Example</h3>undefined<p>SELECT * undefined<br> FROM movies undefined<br> WHERE genre IS NULLundefined</p>undefined<p>SELECT * undefined<br> FROM movies undefined<br> WHERE genre IS NOT NULLundefined</p>undefined
  </main>undefined<footer>undefined<p>undefined<a href="#top">Go back to the top.</a>undefined</p>undefined</footer>undefined
</body>undefined</html>
